name: Java CI with Maven and AWS Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  CI:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build with Maven
      run: mvn -B package --file pom.xml
      env:
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        R2DBC_URL: ${{ secrets.R2DBC_URL }}
        R2DBC_USERNAME: ${{ secrets.R2DBC_USERNAME }}
        R2DBC_PASSWORD: ${{ secrets.R2DBC_PASSWORD }}
        JDBC_URL: ${{ secrets.JDBC_URL }}
        JDBC_USERNAME: ${{ secrets.JDBC_USERNAME }}
        JDBC_PASSWORD: ${{ secrets.JDBC_PASSWORD }}
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
        SWAGGER_URL: ${{ secrets.SWAGGER_URL }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v5.6
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        default_bump: patch
        initial_version: '1.0.0'
        release_branches: main

    - name: Upload Artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: application
        path: target/*.jar

  CD:
    needs: [CI]
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: application
        path: target/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
        container-name: ${{ secrets.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Access Private VM through Public VM
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PUBLIC_VM_HOST }}
        username: ${{ secrets.PUBLIC_VM_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PUBLIC_VM_PORT }}
        script: |
          # Acessar a VM privada a partir da pública
          ssh -i /home/ubuntu/.ssh/gogoodkey.pem ${{ secrets.PRIVATE_VM_USERNAME }}@${{ secrets.PRIVATE_VM_HOST }} << 'EOF'
            # Comandos para rodar na VM privada
            cd /home/gogood/java-app/
            # Atualizar JAR e rodar aplicação
            sudo rm -f /home/gogood/gogood-jar/gogood-api-0.0.1-SNAPSHOT.jar
            sudo mv /home/gogood/java-app/target/gogood-api-0.0.1-SNAPSHOT.jar /home/gogood/gogood-jar/
            sudo chmod +x /home/gogood/gogood-jar/gogood-api-0.0.1-SNAPSHOT.jar
            set -a
            source /home/gogood/gogood-jar/.env
            set +a
            nohup sudo java -jar /home/gogood/gogood-jar/gogood-api-0.0.1-SNAPSHOT.jar > /home/gogood/gogood-jar/app.log 2>&1 &
          EOF
